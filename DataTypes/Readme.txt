~Типы данных

Также как и в C++ типы данных делятся на 
 -Логические 
 -Символьные 
 -Числовые

Все типы данных в языке C# унаследованы в Object
Абсолютно все типы являются классами, а переменные объектами.

Все типы данных можно разделить на ссылочные и значимые

Значимые типы - непосредственно хранят какое-то значение, 
числовое, символьное или логическое.

Значимые: Int,Char, ...

Ссылочные типы хранят аддрес значения в динамической памяти, например:
Строки, массивы - являются ссылочными типами.

Значимые типы ещё называют - примитивные типы
и у каждого примитивного типа есть класс, 
обвёртка который содержит основные характеристики типа данных


x86
IA-16 - Intel Architecture 16 bit
	Внутренние регистры имеют разрядность 16 bit, следовательно,
	максимальное целое число, которое может вычислить CPU = 2^16.
	Здесь был только int(integer) - целое число, разрядностью 16 bit.

IA-32 - Intel Architecture 32 bit
	Внутренние регистрые имеют разрядность 32 bit, следовательно,
	максимальное целое число, которое может вычислить CPU = 2^32.

При появлении архитектуры IA-32
в программировании стали различать 
	short int и long int


В языке c# существует 3 существенных типа
 -float
 -double
 -decimal

 Абсолютно все вещественные типы являются знаковыми,
 беззнаковых вещественных типов не существует.

 float - занимает 4 байта памяти и может хранить 38 знаков после запятой
         с точностью до 7 знаков.

 double - занимает 8 байт памяти и может хранить 308 знаков после запятой
          с точностью до 15 знаков.

 decimal - занимает 16 байт памяти и может хранить 28 знаков после запятой,
		   но обеспечивает максимальную точность дробных чисел
		   и этот тип данных в основном используется
		   для работы с денежными единицами.

 типы float и double являются не точными,
 и следовательно не подходят для работы с денежными единицами,
 для этих целей в языке C# используется тип данных decimal.



 ~Преобразование типов

 C# запрещает любые неявные преобразования от большего к меньшему,
 а также неявные преобразования знаковых типов в беззнаковые и наоборот,
 но все эти типы можно преобразовывать явно, 
 т.к. это делается в языке C++ или же если такое преобразование не работает,
 то при помощи класса Convert.
 
 Любые неявные преобразования от меньшего к большему разрешены.
Microsoft.NET и 

C# - это основной язык програмирования для .NET
хотя .NET поддерживает и другие языки программирования, такие как visual basic

.NET это платформа которая обеспечивает среду выполнения для программ,
программы написанные на языке С++ выполняются непосредственно центральным процессором,
они компилируются в машинные коды центрального процессора

Программы написанные для платформы .NET компилируются в некий ILcode
IL - Intermidiate Language 
 этот ILcode напоминает машинный язык центрального процессора,
но он выполняется не CPU, а CLR

CLR - Common Language Runtime (Общая языковая среда выполнения).
CLR - это одна из основных частей .NET которая отвечает за выполнение кода.
Благодаря CLR программы написанные на C# являются кросс-платформенными,
они работают везде где может работать платформа .NET, 
а уже сама платформа взаимодействует непосредственно с центральным процессором.

CLR - также включает в себя:
			Garbage Collector  - упрощает работу с памятью,
			а именно позволяет не удалять выделяемую память
			(Выделяемая память удаляется автоматически).


Вторая вещь из которой состоит .NET - это BCL 
BCL - Base Class Library (Базовая библиотека Классов)
	  для разработки самых разных приложений.

=====================
|	            |
|    Application    |
|	  	    |
=====================

=====================
|		    |
|      .NET	    |
|		    |
=====================

=====================
|		    |
|  x86,ARM,...	    |
|		    |
=====================


C# -  это объектно ориентированный язык программирования, 
то есть без классов в C# невозможно сделать ничего.

На платформе .NET разрабатывают настольные приложения, 
при помощи 

Desktop Applications:
Windows Forms,
WPF - Windows Presentation Foundation

Web Applications:
ASP.NET (BackEnd, ServerSide)

DataBase:
ADO.NET

Windows Services:
WCF - Windows Communication Foundation

??? службы - Приложения которые работают в фоновом режиме


~Типы данных

Также как и в C++ типы данных делятся на 
 -Логические 
 -Символьные 
 -Числовые

Все типы данных в языке C# унаследованы в Object
Абсолютно все типы являются классами, а переменные объектами.

Все типы данных можно разделить на ссылочные и значимые

Значимые типы - непосредственно хранят какое-то значение, 
числовое, символьное или логическое.

Значимые: Int,Char, ...

Ссылочные типы хранят аддрес значения в динамической памяти, например:
Строки, массивы - являются ссылочными типами.

Значимые типы ещё называют - примитивные типы
и у каждого примитивного типа есть класс, 
обвёртка который содержит основные характеристики типа данных


x86
IA-16 - Intel Architecture 16 bit
	Внутренние регистры имеют разрядность 16 bit, следовательно,
	максимальное целое число, которое может вычислить CPU = 2^16.
	Здесь был только int(integer) - целое число, разрядностью 16 bit.

IA-32 - Intel Architecture 32 bit
	Внутренние регистрые имеют разрядность 32 bit, следовательно,
	максимальное целое число, которое может вычислить CPU = 2^32.

При появлении архитектуры IA-32
в программировании стали различать 
	short int и long int



В языке C# есть только динамические массивы,
они бывают:
	одномерными,
	многомерными,
	зубчатыми.

Массивы в языке C# являются ссылочными типами, 
а хранят лишь ссылку на значение в динамической памяти.

В языке C# отсутствуют указатели,
и любая работа над аддрессами осуществляется только при помощи ссылок.

Ссылка это разыменованный указатель.

Абсолютно все массивы в языке C# являются объектами,
а следовательно массив хранит полную информацию о себе,
а именно:
	кол-во элементов массива,
	кол-во измерений, и т.п. вещи.

Также массивы обдалают определённым поведением.

В языке C++ для работы с контейнерами можно использовать Range-Based for,
аналогом в языке C# является foreach.

foreach - очень удобно применять для работы с контейнерами,
контейнеры в языке C# называются коллекциями (Collections)

foreach(int i in arr)
{
 Console.Write(i + "\t")'
}
Console.WriteLine();



~Перечисления (Enumeration)

*Перечисления(Enumeration) - Это набор именованных констант,
перечисления очень удобно использовать в том случае, 
когда есть строго определённый набор возможных значений,
Например:
	Дни недели,
	Месяцы,
	Клавиши на клавиатуре и т.д.

Перечисления объявляются при помощи ключевого слова - enum .

Перечисления можно объявить либо в классе, либо в пространстве имён.

Перечисления также как и класс является типом данных, 
любая переменная типа Enum может принимать только значения из самого перечисления.

Значения типов перечисления будет int,
но значениям можно задать любой целочисленный тип данных.


~Передача параметров в функцию

Существуют 2 способа передать параметры в функцию:
	1 - по значению.
	2 - по ссылке.
По умолчанию параметры передаются по значению.

 Для того чтобы передать значения по ссылке, 
нужно использовать ключевое слово ref,
либо ключевое слово out.

 ref - Передаваемые переменные обязательно должны быть проинициализированны.

 out - Скорее всего функция инициализирует принимаемые переменные, 
поэтому их можно передавать без предварительной инициализации.



Инкапсуляция в языке C#

также как и во всех языках программирования,
можно использовать Get и Set методы,
они ничем не отличаются от остальных языков программирования,
в C# в геттерах и сеттерах есть ещё свойства (Properties).

Свойства объединяют в себе сразу же Get и Set методы,
для какой-то определённой переменной,
с закрытыми переменными можно работать также как и с обычными переменнами,
причём Get и Set методы вызываются неявно.

Переменную член принято называть с маленькой буквы, а свойство этой переменной с большой.

Если в фильтрации Данных нет необходимости, тогда можно применить авто-свойства,
для авто-свойства даже не объявляется никакая переменная,
переменная для авто-свойств применяется неявно.

~Операторы

Операторы можно перегружать только внутри класса.

Бинарные операторы как правило являются статическими методами.

Многие операторы перегружаются попарно, например сравнения.
